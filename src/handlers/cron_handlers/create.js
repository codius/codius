const { getCurrencyDetails, unitsPerHost } = require('../../common/price.js')
const { checkPricesOnHosts } = require('../../common/host-utils.js')
const codiusState = require('../../common/codius-state.js')
const { uploadManifestToHosts } = require('../../common/manifest-upload.js')
const ora = require('ora')
const statusIndicator = ora({ text: '', color: 'blue', spinner: 'point' })
const crontab = require('crontab')
const logger = require('riverpig')('codius-cli:createCronHandler')
const jsome = require('jsome')
const { promisify } = require('util')
const { getHostsStatus } = require('../../common/host-utils')
const fse = require('fs-extra')
const inquirer = require('inquirer')
const { spawn } = require('promisify-child-process')

// <------------------------------------------------------------------------->
// TODO (vern): Check if cron job has already been created for the pod
// TODO (vern): Add flag to disable cron email notifications
// <------------------------------------------------------------------------->

function checkExpirationDates (statusDetails) {
  statusDetails.map((hostStatus) => {
    const expirationDate = new Date(hostStatus.expirationDate)
    const now = new Date()
    if (expirationDate <= now) {
      throw new Error(`Codius pod deployed to host ${hostStatus.host} expired at ${hostStatus.expirationDate}`)
    }
  })
}

function getCronExtendOptions ({
  hours, minutes, maxMonthlyRate, units, codiusStateFile
}, codiusStateOptions) {
  let duration
  minutes ? duration = 60 * minutes : duration = 3600 * hours
  return {
    duration: duration,
    maxMonthlyRate: maxMonthlyRate || codiusStateOptions.maxMonthlyRate,
    units: units || codiusStateOptions.units,
    codiusStateFile: codiusStateFile
  }
}

function getBufferExtendOptions ({ maxMonthlyRate, units, buffer }, codiusStateOptions) {
  return {
    maxMonthlyRate: maxMonthlyRate || codiusStateOptions.maxMonthlyRate,
    units: units || codiusStateOptions.units,
    duration: buffer * 3600 // Exact duration may vary with each host
  }
}

function checkBufferExtendOptions (options) {
  // NOTE: Some pods may be deployed with an expiration time > buffer
  if (options.hours && options.hours > options.buffer) {
    throw new Error('Buffer time must be greater than the cron extend time')
  }
  const bufferMin = options.buffer * 60
  if (options.minutes && options.minutes > bufferMin) {
    throw new Error('Buffer time must be greater than the cron extend time')
  }
}

function getExtendTime (expirationDate, buffer) {
  // The extend time is the the no. of seconds the pod should be extended to match
  // the specified buffer time. The calculation is as follows:
  // extendTime (sec) = buffer (hrs) * 3600 - (expiration (ms) - now (ms)) / 1000

  const expiration = (new Date(expirationDate))
  const now = (new Date())
  if (expiration <= now) {
    throw new Error(`Codius pod expired at ${expirationDate}, cannot extend`)
  }

  return Math.ceil((buffer * 3600) - (expiration - now) / 1000)
}

function getExtendTimes (statusDetails, buffer) {
  const extendTimes = {}
  statusDetails.map((status) => {
    const expirationDate = status.expirationDate
    const extendTime = getExtendTime(expirationDate, buffer)
    extendTimes[status.host] = extendTime
  })
  return extendTimes
}

function setHours (job, hours) {
  const result = job.hour().every(hours)
  if (!result) {
    throw new Error(`Failed to set cron job range to every ${hours} hrs`)
  }
  return job
}

function setMinutes (job, minutes) {
  const result = job.minute().every(minutes)
  if (!result) {
    throw new Error(`Failed to set cron job range to every ${minutes} min`)
  }
  return job
}

function generateExtendCmd ({ duration, maxMonthlyRate, units, codiusStateFile }) {
  return `codius extend -d ${duration} --max-monthly-rate ${maxMonthlyRate} --units ${units} -y --codius-state-file ${codiusStateFile}`
}

async function addCronJob (options, cmd, manifestHash) {
  const cronJob = {}
  const load = promisify(crontab.load)
  const cron = await load()
  const notice = ` This line has been auto-generated by the codius cli for pod ${manifestHash}; do not modify it by hand`
  const job = cron.create(cmd, null, notice)

  if (job == null) {
    throw new Error(`Failed to create new cron job instance with command '${cmd}' and notice '${notice}'`)
  }

  const hours = options.hours
  const minutes = options.minutes
  minutes ? setMinutes(job, minutes) : setHours(job, hours)

  cronJob.job = job.toString()
  cronJob.creationDate = ((new Date()).toUTCString()) // TODO (vern): Look into using moment??
  cron.save() // TODO (vern): promisify this function and use await?
  logger.debug(`Successfully created and saved cron job ${JSON.stringify(cronJob)}`)
  return cronJob
}

async function extendByBuffer (options) {
  statusIndicator.start('Checking buffer extend options')
  checkBufferExtendOptions(options)
  statusIndicator.succeed()

  statusIndicator.start(`Checking ${options.codiusStateFile} exists`)
  const codiusStateExists = await fse.pathExists(options.codiusStateFile)
  if (!codiusStateExists) {
    throw new Error(`Codius State File at ${options.codiusStateFile} does not exist, please check the provided file location`)
  }
  statusIndicator.succeed()

  statusIndicator.start('Getting Codius State Details')
  const codiusStateJson = await fse.readJson(options.codiusStateFile)
  const manifestJson = codiusStateJson.generatedManifest
  const statusDetails = getHostsStatus(codiusStateJson)
  const hostList = codiusStateJson.hostList
  statusIndicator.succeed()

  statusIndicator.start(`Calculating extend times required to maintain a buffer of ${options.buffer} hrs`)
  const extendTimes = getExtendTimes(statusDetails, options.buffer)
  const extendOptions = getBufferExtendOptions(options, codiusStateJson.options)
  statusIndicator.succeed()

  if (!options.assumeYes) {
    console.info('Extending Manifest:')
    jsome(manifestJson)
    console.info('on the following host(s) with these duration(s):')
    jsome(extendTimes)
    console.info('with the current status:')
    jsome(statusDetails)
    console.info('with options:')
    jsome(extendOptions)

    const userResp = await inquirer.prompt([
      {
        type: 'confirm',
        name: 'continueToExtend',
        message: `Do you want to proceed with extending the pod?`,
        default: false
      }
    ])
    if (!userResp.continueToExtend) {
      statusIndicator.start('User declined to extend pod')
      throw new Error('Extend aborted by user')
    }
  }

  statusIndicator.start('Calculating Max Monthly Rate')
  const maxMonthlyRate = await unitsPerHost(extendOptions) // note the units per host will vary based on the duration
  const currencyDetails = await getCurrencyDetails()
  statusIndicator.succeed()

  statusIndicator.start(`Checking Host(s) Monthly Rate vs Max Monthly Rate ${maxMonthlyRate.toString()} ${currencyDetails}`)
  await checkPricesOnHosts(hostList, extendOptions.duration, maxMonthlyRate, manifestJson)
  statusIndicator.succeed()

  statusIndicator.start(`Extending pod on ${hostList.length} host(s)`)
  const hosts = Object.keys(extendTimes)
  const uploadHostResponses = { success: [], failed: [] }
  const skippedHosts = []
  hosts.map(async (host) => {
    const duration = extendTimes[host]
    if (duration > 0) {
      const uploadHostList = [host]
      const responses = await uploadManifestToHosts(statusIndicator,
        uploadHostList, duration, maxMonthlyRate, manifestJson)
      uploadHostResponses.success = [...uploadHostResponses.success, ...responses.success]
      uploadHostResponses.failed = [...uploadHostResponses.failed, ...responses.failed]
    } else {
      skippedHosts.push(host)
    }
  })

  if (skippedHosts.length > 0) {
    statusIndicator.info('Skipped extend for the following host(s), buffer already maintained:')
    jsome(skippedHosts)
  }
  statusIndicator.succeed()
  if (uploadHostResponses.success.length > 0) {
    statusIndicator.start('Updating Codius State File')
    const bufferDuration = options.buffer * 3600
    const saveStateOptions = {
      codiusStateFile: options.codiusStateFile,
      maxMonthlyRate: extendOptions.maxMonthlyRate,
      units: extendOptions.units,
      duration: bufferDuration
    }
    await codiusState.saveCodiusState(saveStateOptions, manifestJson, uploadHostResponses, codiusStateJson)
    statusIndicator.succeed(`Codius State File: ${options.codiusStateFile} updated`)
  }
}

async function extendWithCron (options) {
  if (options.skipExtend) {
    statusIndicator.start(`Checking ${options.codiusStateFile} exists`)
    const codiusStateExists = await fse.pathExists(options.codiusStateFile)
    if (!codiusStateExists) {
      throw new Error(`Codius State File at ${options.codiusStateFile} does not exist, please check the provided file location`)
    }
    statusIndicator.succeed()
  }
  const codiusStateJson = await fse.readJson(options.codiusStateFile)
  const statusDetails = getHostsStatus(codiusStateJson)
  statusIndicator.start(`Checking expiration dates for running pods`)
  checkExpirationDates(statusDetails)
  statusIndicator.succeed()

  const extendOptions = getCronExtendOptions(options, codiusStateJson.options)
  statusIndicator.start('Generating extend command for cron job')
  const extendCmd = generateExtendCmd(extendOptions)
  logger.debug(`Successfully generated cron job extend command: '${extendCmd}'`)
  statusIndicator.succeed()

  const manifestJson = codiusStateJson.generatedManifest
  const hostList = codiusStateJson.hostList
  const timeUnits = options.hours ? 'hours' : 'minutes'
  const duration = options.hours || options.minutes

  if (!options.assumeYes) {
    console.info('Creating cron job to extend manifest:')
    jsome(manifestJson)
    console.info(`every ${duration} ${timeUnits} with the following command: ${extendCmd}`)
    console.info('on the following host(s):')
    jsome(hostList)
    console.info('with the current status:')
    jsome(statusDetails)

    const userResp = await inquirer.prompt([
      {
        type: 'confirm',
        name: 'continueToCronExtend',
        message: `Do you want to continue creating the cron job for extending the pod?`,
        default: false
      }
    ])
    if (!userResp.continueToCronExtend) {
      statusIndicator.start('User declined to create cron job')
      throw new Error('Cron Extend aborted by user')
    }
  }

  const cronJob = await addCronJob(options, extendCmd, codiusStateJson.manifestHash)
  console.info('Successfully created new extend cron job:')
  jsome(cronJob)
  console.info('Saving cron job to Codius State File')
  const savedCronJobs = codiusStateJson.status.cronJobs
  savedCronJobs ? savedCronJobs.push(cronJob) : codiusStateJson.status.cronJobs = [cronJob]
  await fse.writeJson(options.codiusStateFile, codiusStateJson)
  statusIndicator.succeed(`Codius State File: ${options.codiusStateFile} updated`)
}

async function createCron (options) {
  try {
    // Will throw an error if codius cli is not globally installed
    // TODO (vern): include more explicit error handling
    await spawn('codius', ['--version'], {})
    if (!options.skipExtend) {
      await extendByBuffer(options)
    }

    await extendWithCron(options)
    process.exit(0)
  } catch (err) {
    statusIndicator.fail()
    logger.error(err.message)
    logger.debug(err)
    process.exit(1)
  }
}

module.exports = {
  createCron
}
